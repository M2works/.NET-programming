//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication3
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    
    public partial class Doctor
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Doctor()
        {
            this.ArchivedVisits = new HashSet<ArchivedVisit>();
            this.VisitTimes = new HashSet<VisitTime>();
        }

    
        public int Id { get; set; }
        [Display(Name = "Imię")]
        [Required]
        [MinLength(3, ErrorMessage = "Imię musi zawierać co najmniej trzy znaki")]
        [RegularExpression(@"^([A-ZĄĘŹŁŃŻŚĆÓ][a-zżźćąęłńśó]{2,40}[- ]?)+$", ErrorMessage = "Imię musi zaczynać się wielką literą i zawierać tylko litery")]
        public string Name { get; set; }
        [Display(Name = "Nazwisko")]
        [Required]
        [MinLength(3, ErrorMessage = "Nazwisko musi zawierać co najmniej trzy znaki")]
        [RegularExpression(@"^([A-ZĄĘŹŁŃŻŚĆÓ][a-zżźćąęłńśó]{2,40}[- ]?)+$", ErrorMessage = "Nazwisko musi zaczynać się wielką literą i zawierać tylko litery")]
        public string Surname { get; set; }
        [Display(Name = "Klinika")]
        [Required]
        public int ClinicId { get; set; }
        [Display(Name = "Godzina rozpoczęcia")]
        [Required]
        [Range(1,24)]
        [DefaultValue(8)]
        public int StartingHour { get; set; }
        [Display(Name = "Godzina zakończenia")]
        [Required]
        [Range(1,24)]
        [DefaultValue(20)]
        public int EndingHour { get; set; }
        [Display(Name = "Średnia ocen")]
        public Nullable<double> AverageRating { get; set; }
        [Display(Name = "Liczba ocen")]
        [Required]
        public int RatingsCount { get; set; }
        [Display(Name = "Specjalizacja")]
        [Required]
        public int Specialization { get; set; }
        [Display(Name = "Koszt wizyty")]
        [Required]
        [Range(0,100000)]
        public int VisitPrice { get; set; }
        [Display(Name = "Numer licencji")]
        [Required]
        [RegularExpression(@"^[0-9A-Z]{10}$",ErrorMessage = "Numer licencji musi być 10-znakowym ciągiem cyfr i wielkich liter")]
        public string LicenseNumber { get; set; }
        [Display(Name = "Login")]
        [Required]
        public string DoctorAccount_Login { get; set; }
        [Display(Name = "Hasło")]
        [Required]
        [MinLength(5, ErrorMessage = "Hasło musi mieć co najmniej pięć znaków")]
        [MaxLength(40, ErrorMessage = "Hasło jest za długie")]
        [DataType(DataType.Password)]
        public string DoctorAccount_Password { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ArchivedVisit> ArchivedVisits { get; set; }
        public virtual Clinic Clinic { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<VisitTime> VisitTimes { get; set; }
    }

    public enum Specialization : int
    {
        Chirurg = 0,
        Neurolog = 1,
        Okulista = 2,
        Onkolog = 3,
        Pediatra = 4,
        Psychiatra = 5,
        Kardiolog = 6,
        Internista = 7        
    }
}
